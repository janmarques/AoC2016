using AoC2024;
using System.Net;
using static AoC2024.Utils;

var fullInput =
@"#######################################################################################################################################################################################
#.....#.....#.....#...#...#.#...#...............................#.#.......#.#...#...........#...............#.#...#.....#.....#.....#...................#.......#.#.......#.....#...#.#
###.#.#.###.#.#.#.#.###.#.#.###.#.#.#.#.###.###.#.#.#.#.#.#.###.#.#.###.#.#.#####.###.#.###.#.###.###.#.#.###.#.###.#.#.#.###.###.###.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.###.#
#.#......4#.#.....#...#...#.#...........#...#.#.#...#.#...#...#.#.........#.#.#.........#...........#.............#.....#...#...#.#...#...#...#....3#.....#.....#.............#.......#
#.#####.###.#.#####.#.#.#.#.#.#####.###.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#######.#.#.#.#.###.#####.###.#.#.###.###.#.#.#.#.#####.###.###.#.#.###.#.#####.#####.###.#####.###.#
#.#...#.....#.#.#...#.#.#.#.#...........#...#...#.....#...#...#.........#.............#.....#...#...#.........#.#...#.......#.....#.....#...#...#...........#.....#.....#...#...#.#...#
###.#.#.###.#.#.#.#.#.#.#.#.#####.###.###.#.#.###.#######.#.#.###.#.#.###.#######.###.#.#######.#.#####.#.###.#.#####.#.#.#.#.###.#.###.#.#.#.###.###.#.#.###.#.#.###.#.#.#.#.#.###.#.#
#...#.......#.#.#.........#...#.....#.#.....#...#...........#.#...#.....#.#.......................#.......#...#.............#...#...#...#.........#.....#.#...#...#.#.....#.....#.#...#
#.#.###.#.#.#.#.#.#####.###.#.#.###.#.#.#.#.###.###.#####.#.#####.#.###.#.#.#.#.###.#.###.#.#####.#.###.#.#.#.#.#.###.#.#.#.#.#.#####.#.#########.#####.#.#.#.#.#.#.#.###.#####.#.#.###
#...#...#.#.#...........#...#...#...#.........#.#...#.....#...#...#.#...#.....#.....#.....#...#...........#.#.#...#...#.....#.....#.#.......#...........#.#.......#...#.....#...#.#.#.#
#.#.###.#.#.#.#.###.#.###.#.#.#.###.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.#####.#.#.#.#.#####.#.###.###.#.#.#.#####.#####.#.#.#.#.###.#.#.#.#########.#.###.#.###.#.#.#.#.#.#.#.###.#
#...#...#...#.#...#...#.......#...............#.#...#.........#...#.#...#...#.............#.#...#.#.......#.....#...#...#.....#.#...#.........#6..#...#.....#.#.....#...#...#...#.....#
#.#.#.#######.#.#.#.#.#.#####.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#######.#.###.#.###.#####.#.#.#.#.#.#.#####.#######.#.###.#.#.#.#.#.#.#.###.#####.#.#.###.#####.#####.#.#####.#.#.#.###
#.....#.....#...#.#...#.#...........#...#...#.......#.....#.#.#...#.#.....#.....#.....#.......#.....#.#...#.#...#.......#.........#...#.......#...#.#.....#...#.....#.#.#.#.#.....#...#
###.#.###.#.#.###.#.#.#.#.###.###.#.###.#.#.#.#.###.#.###.#######.#.#.###.#.#.#.#.#.#.#.#######.###.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###.###.#.#.###.#####.#.#.#.#.#.#.#.#.#.###.#####
#.#.#.#.....#...#.#...#...#...#.........#.....#.....#.#...#.......#...#.....#...#...#...#...#.....#...#.#...#.........#.....#.....#.......#.....#.#.....#...#...#...#.#.....#.........#
#.###.#.#.###.#.#.#.#.#.#.###.#####.###.#.###.#.#.#.#.#.#.#.#####.#.#.#.###.#.#.#####.#####.#.#####.#.#.#######.#.#.#.#.#.#.###.#.#.#.#.#.#######.#.###.#.#####.###.###.#.#.#.#.#.###.#
#.....#.#5#...#...#...#.#.....#.........#.....#.#.......#...#.......#.#.......#.#.#...........#.......#...#.#.....#.#.........#...#.#.....#.......#..0#.........#...#.....#.#.....#.#.#
#.###.#.###.#.#.#.#.#.#.###.###.#####.#########.#.#.#.#.###.#.#.###.#.#.#.#.#.###.#.###.#####.#.#.#####.#.#.#.#.###.#######.#####.#########.#.#.#.#.#.#.###.#.#.#.#.#.###.#.#####.#.#.#
#.....#.........#...#...#.........#.....#.......#...#.#.......#.....#.#...#.#.#...#.#.#.....#...............#.#.....#.......#.#.......#.......#.#.....#.#.......#.........#.......#...#
#.###.#.#.#.###.#.###.#########.#.###.#.#.###.#.#.#####.#.#.#.#####.#.#.#.#.###.#.#.#.#.#.###.#.#.#.#.#.###.#.#.#####.#.#.###.#.###.#.#.#####.#.#.#####.#.#.###.#########.#.#.#######.#
#.....#.......................#.#.#...#...#.............#.#.....#...........#...#.#...#.........#.#...#.....#...........#.#.#.......#.#...#.......#.........#.................#.#.....#
#.#.#.#.#.#.#.###.#######.#.#.#.###.#.#.###.#.#.#.#.#.#.#.#.###.#.#.#.#####.#.#.#.#.#.#######.###.#.#.###.#.#######.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#######.#.#####.#.#####.###.#.#
#...#...#...#.......#.#...#.#.#...#.#...........#.#.......#.....#.......#.......#.............#...#.#.#...#.......#.#.....#...#...#.....#.......#.....#...#.....#.........#.....#.#...#
#.#.###.#.#.#.###.#.#.#.#.#.#.###.#.###.###.###.#.#.###.#.#.#.#.#.#.###.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#.#.###.#.#.#.#.###.###.#.#.###.#####.#.#.#.###.#.#.#.#
#...............#.....#...#...#.....#.........#.....#...#...#.#.........#...........#.#.....#.#.....#...#...#...#.#.........#.....#...#.............#1#...#.#.........#.#...#.......#.#
#####.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.#.###.###.###.#.###.#.#.###.###.#.#.#.###.#.#.#.###.###.#.#.#.#.#.#.#.###.#.#.#.#.#####.###.#.#.#.#.#.#######.#.#.#.###.#.#.#.###
#.#...........#.....#...#...#.#.........#...#...#.......#.....#.#.....#.........#.#...#...#...#.......#...#.......#.#.#...#.......#...#...............#.........#.......#.#...#.....#.#
#.#.#.#.#.###.#.#.#.#.#.#.#.#.###.###.###.#.#.#.#.#######.#.#.###.#####.###.###.#.#.#.#######.#######.#.###.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#####.#.###.#.#####.#########.###.#.#.#.#
#...........#.....#.......#...#...#...#7..#.....#.......#.....#...#.....#.......#.#...#...#.....#.......#.#.#.....#...............#...#.#...#.#...#.......#.#.#.#...#...#.#.#.....#.#.#
###.###.###.#####.#.#########.#####.#.###.#######.###.#.###.#.###.###.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#.#####.#.#.#.#.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#####.#.#.#.#
#...#...#.#.......#...........#.......#.....#.#.......#.....#.#...#...#...#...#.......#...#.#.........#.............#...........#.#...#.#...#.#...#...#...#...#...#.#.....#.......#...#
#.###.#.#.#####.#.###.#.#.#####.#.#.#.#.###.#.#.###.#.#.#.###.#.#.#.#.#######.#.###.###.#.###.#####.#.#.#.###.#.#.#.#####.#.#.#.#####.#.#.###.#.#.#.#.#.###.#.###.###.#.#.#.#.#.#.#.###
#.#.....#.#.#.........#...........#...............#...#.#.#.#.#...#...#.........#...#...#.#.#.#...#...#.......#.#.....#.....#...#.#...#.#...........#.....#.#.....#...#.........#.....#
#.#.###.#.#.#.#.#.#.#.#####.#.#.#.#.#.#####.###.###.###.###.###.###.#############.###.###.#.#.#.#.#.#.#.###.#.#.#####.#.#.#######.###.#.#.#.###.#.#.#.#.###.#######.#.#.#.#.###.#####.#
#...#.#.#.#...#.#...#.....#...........#.#...#.......#...........#...#.....#.#...........#.#.....#...#.#...#...#...............#...#...#.#...#...#...#...#.....#2......#...#.#.#.#.....#
#######################################################################################################################################################################################";

var smallInput =
@"###########
#0.1.....2#
#.#######.#
#4.......3#
###########";

var smallest =
@"";


// copy 2023 day 23


var input = smallInput;
input = fullInput;
//input = smallest;
var timer = System.Diagnostics.Stopwatch.StartNew();

var result = long.MaxValue;

var grid = Utils.ParseCoordGrid(input, (x) => x.c == '#' ? null : new Cell { y = x.y, x = x.x, c = x.c }).Where(x => x != null).ToList();
Utils.SetNeighbours(grid, x => x.Neighbours, x => x.x, x => x.y);


var junctions = grid.Where(x => x.c != '.').ToList();

string Hash(Cell a, Cell b) => string.Join("||", new[] { a, b }.OrderBy(x => x.x).ThenBy(x => x.y).Select(x => x.ToString()));

var distances = new Dictionary<string, long>();

Utils.AllCombinations(junctions, (a, b) =>
{
    Utils.Counter("junction", 1);

    var distance = CalculateDistance(a, b);
    distances.Add(Hash(a, b), distance);

});

long CalculateDistance(Cell a, Cell b)
{
    var distances = grid.ToDictionary(x => x, _ => (visited: false, distance: int.MaxValue));
    distances[a] = (false, 0);

    while (true)
    {
        var (currentNode, (visited, distance)) = distances.Where(x => x.Value.distance < int.MaxValue && !x.Value.visited).OrderBy(x => x.Value.distance).FirstOrDefault();
        if (currentNode == default) { break; }

        foreach (var other in currentNode.Neighbours)
        {
            var newTotal = distance + 1;
            var entry = distances[other];
            entry.distance = Math.Min(distances[other].distance, newTotal);
            distances[other] = entry;
        }
        distances[currentNode] = (true, distance);
    }
    return distances[b].distance;
}


var start = grid.Single(x=> x.c == '0');

var pq = new PriorityQueue<(Cell, HashSet<Cell> toVisit, long score), long>();
pq.Enqueue((start, junctions.Where(x => x != start).ToHashSet(), 0), 0);

int i = 0;


var results = new HashSet<long>();
var paths = new List<HashSet<Cell>>();

while (pq.Count > 0)
{
    var (position, toVisit, score) = pq.Dequeue();
    //if (i % 100 == 0)
    {
        Console.WriteLine($"{i}i {pq.Count}queue {score}score");
    }
    i++;

    if (!toVisit.Any())
    {
        result = Math.Min(result, score);
    }

    foreach (var other in toVisit)
    {
        var cost = distances[Hash(position, other)];
        var newTotal = score + cost;
        var newPathTaken = toVisit.ToHashSet();
        newPathTaken.Remove(other);
        pq.Enqueue((other, newPathTaken, newTotal), newTotal);
    }
}

foreach (var item in results)
{
    Console.WriteLine(item);
}

//result = results.Last();

timer.Stop();
Console.WriteLine(result);
Console.WriteLine(timer.ElapsedMilliseconds + "ms");
Console.ReadLine();

class Cell
{
    public int x;
    public int y;
    public char c;
    public HashSet<Cell> Neighbours = new HashSet<Cell>();
    public override string ToString() => $"{x},{y} : {c}";
}